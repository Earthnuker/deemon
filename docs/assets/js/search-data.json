{"0": {
    "doc": "Automations",
    "title": "Automations",
    "content": " ",
    "url": "https://digitalec.github.io/deemon/docs/automations",
    "relUrl": "/docs/automations"
  },"1": {
    "doc": "Backup",
    "title": "Backup",
    "content": "# Backup {: .no_toc } --- Introduced in version 1.0, you can now make backups of your deemon installation including your _config.json_, _deemon.db_ and (optionally) the _logs_ directory. ```bash $ deemon backup --include-logs Backed up to /home/user/.config/deemon/backups/20210603-233151.tar ``` To restore from a backup, delete the contents of your `deemon` directory and extract the tar file inside. ",
    "url": "https://digitalec.github.io/deemon/docs/commands/backup/",
    "relUrl": "/docs/commands/backup/"
  },"2": {
    "doc": "Commands",
    "title": "Commands",
    "content": " ",
    "url": "https://digitalec.github.io/deemon/docs/commands",
    "relUrl": "/docs/commands"
  },"3": {
    "doc": "Common Issues",
    "title": "Common Issues",
    "content": "# Common Issues {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- ## Requests ## Log file in use If you're using _deemix-pyweb_ on the same system as deemon, you may run into an issue where deemon cannot call deemix because a log file is already in use. If this happens, it is recommended to make a copy of the deemix config folder. This will allow deemix to run and create a separate log file in this new directory. You **must** set the _deemix_config_ setting in deemon's _config.json_ to point to this new directory. ## Error: ARL is invalid, expired or missing This error will appear when deemon cannot locate your _.arl_ to send to deemix. Make sure you have run the command line application \"deemix\" at least once prior to using deemon. Keep in mind, _deemix-pyweb_ and _deemix_ are not the same thing! ",
    "url": "https://digitalec.github.io/deemon/docs/troubleshooting/common-issues/",
    "relUrl": "/docs/troubleshooting/common-issues/"
  },"4": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": "# Configuration {: .no_toc } deemon has some specific configuration parameters that can be defined in your config.json file. {: .fs-6 .fw-300 } ## {: .no_toc .text-delta } 1. TOC {:toc} --- ## Configuration File Depending on your operating system, your config.json file will be located in one of the following locations: * **Windows:** %appdata%\\deemon * **macOS:** /User/username/Library/Application Support/deemon * **Linux:** /home/username/.config/deemon **config.json - v1.0 default** ```json { \"plex_baseurl\": \"\", \"plex_token\": \"\", \"plex_library\": \"\", \"download_path\": \"\", \"deemix_path\": \"\", \"album_release\": \"new\", \"release_max_days\": 90, \"bitrate\": \"320\", \"alerts\": 0, \"record_type\": \"all\", \"smtp_server\": \"\", \"smtp_port\": 465, \"smtp_user\": \"\", \"smtp_pass\": \"\", \"smtp_sender\": \"\", \"smtp_recipient\": \"\" } ``` ## Plex deemon can initiate a refresh of a given Plex library to ensure Plex sees new music as soon as its available. Plex does have ways of monitoring folders for changes but sometimes this doesn't always work or may be delayed. To use this feature, you'll need to provide the following configuration values in your config.json: * **plex_baseurl** - Address to your Plex server (_http://127.0.0.1:32400_) * **plex_token** - Authentication token [(instructions)](https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/) * **plex_library** - Name of the Plex library to refresh ## Email Notifications When deemon performs a refresh and finds a new release, you can choose to receive email notifications containing a list of all releases that were found. This feature can be enabled by setting the _alerts_ parameter to _1_. | option | description | allowed values |:--------------|:------------------|:---------------| alerts | enable or disable email notifications | 0 or 1 | smtp_server | outgoing mail server | smtp_port | outgoing mail server port | smtp_user | username of outgoing mail server | smtp_pass | password for outgoing mail account | smtp_sender | \"from\" address | smtp_recipient | \"to\" address | ## Release Handling ### Quality & Downloads Specify settings that override default deemix values | option | description | allowed values |:--------------|:------------------|:-------| bitrate | choose between MP3 or FLAC | 128, 320, FLAC | download_path | path to download music | deemix default path | deemix_path | path to deemix config directory | deemix default path | ### Release Options The following options pertain to handling releases. By default, deemon checks each monitored artist for new releases with release dates no older than 90 days. This number can be adjusted by changing the value of _release_max_days_. If _release_by_date_ is set to 0 (disabled), any new release will be considered new even if its an older release recently added to Deezer's library. You may also wish to monitor only for new full-length albums which can be set using the _record_type_ parameter. Keep in mind, most EPs are labeled as albums so if you're missing releases, avoid using the \"ep\" designation. | option | description | allowed values |:--------------|:------------------|:-------| release_by_date | verify release date is newer than release_max_days | 0 or 1 | release_max_days | max amount of days to consider new release | # days (_default: 90_) | record_type | monitor only for specific record types | all, album, ep, single | ",
    "url": "https://digitalec.github.io/deemon/docs/configuration/",
    "relUrl": "/docs/configuration/"
  },"5": {
    "doc": "Cron (Linux/macOS)",
    "title": "Cron (Linux/macOS)",
    "content": "# Cron {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- A cron job is the ideal way to run deemon in regular intervals to check for new releases or to \"watch\" a directory. ## Watch Directory You can create a cron job that periodically imports a directory to make sure any new artists are automatically monitored. This example scans and imports all artist subdirectories in _/path/to/music_ every day at midnight: ```bash $ crontab -l 0 0 * * * deemon import /path/to/music ``` ## Check for New Releases This example checks for new releases every day at 06:00: ```bash $ crontab -l 0 6 * * * deemon refresh ``` ",
    "url": "https://digitalec.github.io/deemon/docs/automations/cron/",
    "relUrl": "/docs/automations/cron/"
  },"6": {
    "doc": "Download",
    "title": "Download",
    "content": "# Download {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- deemon includes a command line interface to the deemix library allowing you to download by artist, artist ID, album ID or URL. ## By Artist ```bash $ deemon download My Awesome Band ``` ## By Artist ID ```bash $ deemon download --artist-id 1234 ``` ## By Album ID ```bash $ deemon download --album-id 1234 ``` ## By URL Monitoring by URL was implemented with the intention of using it for integration with automation tools like Siri Shortcuts. ```bash $ deemon download --url https://www.deezer.com/us/artist/1234 ``` ## Configuration Overrides You can override the config.json and specify one-off settings for downloads such as bitrate and record type: ```bash ## Download all album releases in FLAC format by My Band $ deemon download My Band --bitrate 9 --record-type album ``` ",
    "url": "https://digitalec.github.io/deemon/docs/commands/download/",
    "relUrl": "/docs/commands/download/"
  },"7": {
    "doc": "Import",
    "title": "Import",
    "content": "# Import {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- Starting with version 1.0, artists are no longer read from a file or directory during a `refresh`. Artists are imported into the database once (either through the `import` or `monitor` command) eliminating the need to pass a list of artists each time deemon is run. ## Text File To import a list of artists via a text file, each line must contain only one artist. Each artist will be imported into the database and configured with the settings in your config.json file. **Example - artists.txt** ``` My Band My Friend's Band Another Band ``` ```bash $ deemon import artists.txt ``` ## Directory Similarly to importing artists via a text file, deemon can read a directory listing that contains artist subdirectories. **Example - /home/user/music** ``` $ ls -1 My Band My Friend's Band Another Band ``` ```bash $ deemon import /home/user/music ``` ",
    "url": "https://digitalec.github.io/deemon/docs/commands/import/",
    "relUrl": "/docs/commands/import/"
  },"8": {
    "doc": "Home",
    "title": "Home",
    "content": "# deemon Documentation {: .fs-9 } deemon is a monitoring utility for new artist releases that can provide email alerts and automate downloading via the deemix library {: .fs-6 .fw-300 } [Get started now](#getting-started){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 } [View it on GitHub](https://github.com/digitalec/deemon){: .btn .fs-5 .mb-4 .mb-md-0 } --- ## Getting started ### Dependencies deemon depends on various python modules and libraries to perform all of its functions. The following dependencies are automatically installed when deemon is installed using the `pip` package manager ``` deezer-py deemix plexapi packaging requests click progressbar ``` ### First use The first time you run deemon, you'll need to start monitoring an artist. Monitoring an artist can be done simple by using the `monitor` command: ```bash $ deemon monitor Artist ``` ### Configure deemon - [See configuration options]({{ site.baseurl }}{% link docs/configuration.md %}) --- ## About the project deemon is an open source project that came from the need to stay on top of new releases by some of my favorite artists ### License deemon is distributed by a [GPL-3.0 license](https://github.com/digitalec/deemon/blob/main/LICENSE). ",
    "url": "https://digitalec.github.io/deemon/",
    "relUrl": "/"
  },"9": {
    "doc": "Logs",
    "title": "Logs",
    "content": "# Logs {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- If you're having issues or would like to see how things are running, you can view the log files which are located inside the [deemon config directory](/docs/configuration#configuration-file). As of version 1.0, the logs from deemix are now included (as well as other third-party modules used) in the deemon log file. ",
    "url": "https://digitalec.github.io/deemon/docs/troubleshooting/logs/",
    "relUrl": "/docs/troubleshooting/logs/"
  },"10": {
    "doc": "Monitor",
    "title": "Monitor",
    "content": "# Monitor {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- Monitoring artists is the core feature of deemon. Using the monitor command, you can monitor artists by name, their Deezer ID or Deezer URL. ## Monitor by Artist Name This is the easiest way to monitor an artist but has some limitations. When using an artist name, deemon searches Deezer via an API call which returns the most likely result. In some situations you may find yourself monitoring the wrong artist. In this case, it would be best to [monitor the artist by ID](#monitor-by-artist-id). ```bash $ deemon monitor My Awesome Band ``` ## Monitor by Artist ID The Artist ID is the number located in the URL after `/artist/` and can be used to monitor an artist directly. This is the most accurate way to monitor an artist because this number is unique. If monitoring by artist name doesn't give you the correct artist or an artist has more than one artist profile, this method is guaranteed to give you this exact artist. ```bash $ deemon monitor --artist-id 1234 ``` ## Monitor by URL Monitoring by URL was implemented with the intention of using it for integration with automation tools like Siri Shortcuts. ```bash $ deemon monitor --url https://www.deezer.com/us/artist/1234 ``` ## Stop Monitoring an Artist If you no longer wish to monitor an artist, include the `--remove` flag with one of the above methods and they will be removed from the database. ```bash $ deemon monitor --remove ... ``` ",
    "url": "https://digitalec.github.io/deemon/docs/commands/monitor/",
    "relUrl": "/docs/commands/monitor/"
  },"11": {
    "doc": "Refresh",
    "title": "Refresh",
    "content": "# Refresh {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- The `refresh` command is used to check for new releases, update the database and queue new releases with deemix. ",
    "url": "https://digitalec.github.io/deemon/docs/commands/refresh/",
    "relUrl": "/docs/commands/refresh/"
  },"12": {
    "doc": "Show",
    "title": "Show",
    "content": "# Show {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- Using the `show` command, you can currently view information pertaining to artists and new releases. ## Monitored Artists Show all currently monitored artists ```bash $ deemon show --artists ``` ## New Releases Show all new releases in last N days ```bash $ deemon show --new-releases 7 ``` ",
    "url": "https://digitalec.github.io/deemon/docs/commands/show/",
    "relUrl": "/docs/commands/show/"
  },"13": {
    "doc": "Siri Shortcuts (iOS)",
    "title": "Siri Shortcuts (iOS)",
    "content": "# Siri Shortcuts {: .no_toc } ## {: .no_toc .text-delta } * TOC {:toc} --- Siri Shortcuts can be used to run commands over SSH allowing you to integrate quick-and-easy ways to monitor or download from your iPhone. This example shows you how to monitor an artist by \"sharing\" the webpage to the shortcut. ## Monitor URL via Share Sheet Using this Shortcut, you can simply share a webpage to the shortcut which will connect via SSH and run the command for you. ### Getting Started Open the Shortcuts app and create a new shortcut. Press the menu icon \"...\" in the upper right corner and give your shortcut a name. Make sure _Show in Share Sheet_ is also toggled on and _Share Sheet Types_ is set to _URLs_. ### Building the Shortcut 1. Create the first action by searching for _If_. Set the input to \"Shortcut Input\" and condition to \"has any value\". 2. Between _If_ and _Otherwise_, add the _Run script over SSH_ action. 3. Fill in your server settings. If you're using SSH keys, one will be generated and you'll need to copy this to your _~/.ssh/authorized_keys_ file before you can connect. 4. Set the _Input_ to _Shortcut Input_ if its not already. Below this, the _script_ will be `deemon monitor --url ` followed by the _Shortcut Input_ variable (_make sure there is a space after_ `--url`). 5. At this point, go ahead and find an artist you wish to monitor for new releases on Deezer and then share the page to your newly create Shortcut. This should automatically log in and run the `monitor` command. You can verify this was successful by checking the log file in the [deemon config directory](/docs/configuration#configuration-file). ",
    "url": "https://digitalec.github.io/deemon/docs/automations/siri-shortcuts/",
    "relUrl": "/docs/automations/siri-shortcuts/"
  },"14": {
    "doc": "Task Scheduler (Windows)",
    "title": "Task Scheduler (Windows)",
    "content": "# Task Scheduler {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} --- Coming soon ## Watch Directory ## Check for New Releases ",
    "url": "https://digitalec.github.io/deemon/docs/automations/task-scheduler/",
    "relUrl": "/docs/automations/task-scheduler/"
  },"15": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": " ",
    "url": "https://digitalec.github.io/deemon/docs/troubleshooting",
    "relUrl": "/docs/troubleshooting"
  }
}
